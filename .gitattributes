pip install tensorflow

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

from sklearn.datasets import load_boston
data=load_boston()
x=data.data
y=data.target

x_train,x_val,y_train,y_val=train_test_split(x,y,test_size=0.2,random_state=42)

scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_val=scaler.transform(x_val)

model=Sequential()
model.add(Dense(64,input_shape=(x_train.shape[1],),activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(1))

model.compile(optimizer='adam',loss='mse',metrics=['mae'])

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('model Accuracy')
plt.xlabel('Accuracy')
plt.ylabel('Epochs')
plt.legend(['train','validation'],loc='upper left')
plt.show()


plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('loss')
plt.xlabel('loss')
plt.ylabel('Epochs')
plt.legend(['train','validation'],loc='upper left')
plt.show()

model.fit(x_train, y_train, epochs=100, validation_data = (x_val, y_val))

x_loss,x_mae=model.evaluate(x_train,y_train,verbose=2)

y_pred=model.predict(x_test)
y_pred
